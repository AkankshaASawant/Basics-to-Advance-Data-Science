### The **30 Python questions** (from Basics to Advanced levels):

---

### **Basics**
#### **Q1. What will the following code output?**
```python
x = [1, 2, 3]
y = x
y.append(4)
print(x)
```
A) `[1, 2, 3]`  
B) `[1, 2, 3, 4]`  
C) `[1, 2, 4]`  
D) Error  

**Answer:** B) `[1, 2, 3, 4]`  
*Explanation:* `y` is a reference to the same list `x`. Any modification to `y` affects `x`.

---

#### **Q2. What is the output of this code?**
```python
a = 10
b = 5
print(a // b)
```
A) `2.0`  
B) `2`  
C) `5.0`  
D) Error  

**Answer:** B) `2`  
*Explanation:* The `//` operator performs floor division and returns an integer.

---

#### **Q3. What will this code output?**
```python
print(bool([]), bool([0]), bool(None))
```
A) `False True True`  
B) `False False False`  
C) `False True False`  
D) Error  

**Answer:** C) `False True False`  
*Explanation:* An empty list (`[]`) and `None` are `False`, but `[0]` (a non-empty list) is `True`.

---

#### **Q4. What is the output of this code?**
```python
x = 'Hello'
print(x[1:4])
```
A) `Hel`  
B) `ell`  
C) `lo`  
D) Error  

**Answer:** B) `ell`  
*Explanation:* `x[1:4]` slices the string from index `1` (inclusive) to `4` (exclusive).

---

#### **Q5. What will the following code output?**
```python
print(type(lambda x: x + 1))
```
A) `<class 'function'>`  
B) `<class 'lambda'>`  
C) `<class 'method'>`  
D) Error  

**Answer:** A) `<class 'function'>`  
*Explanation:* Lambda functions in Python are objects of type `function`.

---

### **Intermediate**
#### **Q6. What is the output of this code?**
```python
def func(a, b=10):
    return a + b

print(func(5))
```
A) `5`  
B) `10`  
C) `15`  
D) Error  

**Answer:** C) `15`  
*Explanation:* The default value of `b` is `10`. When `func(5)` is called, `a=5` and `b=10`.

---

#### **Q7. What will this code produce?**
```python
x = [1, 2, 3]
y = x[:]
y[0] = 99
print(x)
```
A) `[1, 2, 3]`  
B) `[99, 2, 3]`  
C) `[99, 99, 3]`  
D) Error  

**Answer:** A) `[1, 2, 3]`  
*Explanation:* `x[:]` creates a shallow copy of the list, so `y` is independent of `x`.

---

#### **Q8. What is the result of this code?**
```python
x = {'a': 1, 'b': 2}
x.update({'b': 10, 'c': 3})
print(x)
```
A) `{'a': 1, 'b': 2}`  
B) `{'a': 1, 'b': 10, 'c': 3}`  
C) `{'a': 1, 'c': 3}`  
D) Error  

**Answer:** B) `{'a': 1, 'b': 10, 'c': 3}`  
*Explanation:* The `update` method modifies `x` by adding new keys and updating existing ones.

---

#### **Q9. What does this code return?**
```python
x = {1, 2, 3, 4}
y = {3, 4, 5}
print(x & y)
```
A) `{1, 2, 5}`  
B) `{3, 4}`  
C) `{}`  
D) Error  

**Answer:** B) `{3, 4}`  
*Explanation:* `&` computes the intersection of sets `x` and `y`.

---

#### **Q10. What does this code output?**
```python
print(3 < 5 == True)
```
A) `True`  
B) `False`  
C) `Error`  
D) `None`  

**Answer:** B) `False`  
*Explanation:* Comparison operators chain in Python, so `3 < 5 == True` evaluates as `(3 < 5) and (5 == True)`.

---

### **Advanced**
#### **Q11. What will this code do?**
```python
x = [1, 2, 3]
print(sum(x, 10))
```
A) `6`  
B) `16`  
C) `Error`  
D) `None`  

**Answer:** B) `16`  
*Explanation:* The `sum` function starts summing with an initial value of `10`.

---

#### **Q12. What is the result of this code?**
```python
class A:
    def __init__(self):
        self.x = 1

a = A()
print(hasattr(a, 'x'))
```
A) `True`  
B) `False`  
C) `Error`  
D) `None`  

**Answer:** A) `True`  
*Explanation:* The `hasattr` function checks if the attribute `x` exists in the object `a`.

---

#### **Q13. What does this code do?**
```python
x = zip([1, 2, 3], ['a', 'b', 'c'])
print(list(x))
```
A) `[(1, 'a'), (2, 'b'), (3, 'c')]`  
B) `[(1, 'b'), (2, 'c')]`  
C) `[(1, 1), (2, 2), (3, 3)]`  
D) Error  

**Answer:** A) `[(1, 'a'), (2, 'b'), (3, 'c')]`  
*Explanation:* The `zip` function pairs elements from the input iterables.

---

#### **Q14. What is the result of this code?**
```python
x = [1, 2, 3, 4]
print(x[::-1])
```
A) `[4, 3, 2, 1]`  
B) `[1, 2, 3, 4]`  
C) `None`  
D) Error  

**Answer:** A) `[4, 3, 2, 1]`  
*Explanation:* `[::-1]` reverses the list.

---

#### **Q15. What does the following code output?**
```python
def func(x, *args):
    return x + sum(args)

print(func(2, 3, 4))
```
A) `9`  
B) `6`  
C) `7`  
D) Error  

**Answer:** A) `9`  
*Explanation:* `*args` collects additional arguments into a tuple.


---

#### **Q16. What will the following code output?**
```python
x = [i**2 for i in range(5)]
print(x)
```
A) `[0, 1, 2, 3, 4]`  
B) `[0, 1, 4, 9, 16]`  
C) `[1, 4, 9, 16, 25]`  
D) Error  

**Answer:** B) `[0, 1, 4, 9, 16]`  
*Explanation:* This is a list comprehension that calculates `i**2` (i.e., squares of numbers) for each value of `i` in `range(5)`.

---

#### **Q17. What does this code output?**
```python
x = {1, 2, 3}
x.add(4)
print(x)
```
A) `{1, 2, 3}`  
B) `{1, 2, 3, 4}`  
C) `[1, 2, 3, 4]`  
D) Error  

**Answer:** B) `{1, 2, 3, 4}`  
*Explanation:* The `add` method adds an element to a set.

---

#### **Q18. What will this code print?**
```python
print("Python"[-1])
```
A) `P`  
B) `n`  
C) `o`  
D) Error  

**Answer:** B) `n`  
*Explanation:* Negative indexing allows access to elements from the end of the string. `[-1]` accesses the last character.

---

#### **Q19. What does this code output?**
```python
x = (1, 2, 3) + (4, 5)
print(x)
```
A) `(1, 2, 3, 4, 5)`  
B) `[1, 2, 3, 4, 5]`  
C) `Error`  
D) `(1, 2, 3)`  

**Answer:** A) `(1, 2, 3, 4, 5)`  
*Explanation:* Tuples are immutable, but they can be concatenated using the `+` operator.

---

#### **Q20. What is the output of this code?**
```python
def func(x):
    return x * 2

y = map(func, [1, 2, 3])
print(list(y))
```
A) `[2, 4, 6]`  
B) `[1, 2, 3]`  
C) `[1, 4, 9]`  
D) Error  

**Answer:** A) `[2, 4, 6]`  
*Explanation:* The `map` function applies `func` to each element of the iterable.

---

#### **Q21. What will the following code output?**
```python
x = {'a': 1, 'b': 2, 'c': 3}
for k, v in x.items():
    print(k, v)
```
A) `('a', 1)`  
B) `a 1\nb 2\nc 3`  
C) `[('a', 1), ('b', 2), ('c', 3)]`  
D) Error  

**Answer:** B) `a 1\nb 2\nc 3`  
*Explanation:* The `items()` method returns key-value pairs as tuples, and the `for` loop unpacks them.

---

#### **Q22. What is the output of this code?**
```python
print(list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])))
```
A) `[1, 3]`  
B) `[2, 4]`  
C) `[1, 2, 3, 4]`  
D) Error  

**Answer:** B) `[2, 4]`  
*Explanation:* The `filter` function returns elements for which the lambda function evaluates to `True`.

---

#### **Q23. What will this code print?**
```python
x = [1, 2, 3]
print(x * 2)
```
A) `[1, 2, 3, 1, 2, 3]`  
B) `[2, 4, 6]`  
C) `[1, 1, 1, 1, 1, 1]`  
D) Error  

**Answer:** A) `[1, 2, 3, 1, 2, 3]`  
*Explanation:* Multiplying a list by an integer replicates its elements.

---

#### **Q24. What is the output of this code?**
```python
x = {1, 2, 3}
y = {3, 4, 5}
print(x | y)
```
A) `{3}`  
B) `{1, 2, 3, 4, 5}`  
C) `{1, 2, 3}`  
D) Error  

**Answer:** B) `{1, 2, 3, 4, 5}`  
*Explanation:* The `|` operator performs a union of two sets.

---

#### **Q25. What will this code output?**
```python
x = [1, 2, 3]
x.extend([4, 5])
print(x)
```
A) `[1, 2, 3, 4, 5]`  
B) `[1, 2, 3]`  
C) `[4, 5]`  
D) Error  

**Answer:** A) `[1, 2, 3, 4, 5]`  
*Explanation:* The `extend` method adds elements from another iterable to the end of the list.

---

#### **Q26. What does this code output?**
```python
try:
    print(10 / 0)
except ZeroDivisionError:
    print("Cannot divide by zero")
```
A) `Cannot divide by zero`  
B) `0`  
C) `Error`  
D) None  

**Answer:** A) `Cannot divide by zero`  
*Explanation:* The `try-except` block catches the `ZeroDivisionError` and executes the `except` block.

---

#### **Q27. What will this code output?**
```python
x = (1, 2, [3, 4])
x[2][0] = 99
print(x)
```
A) `(1, 2, [99, 4])`  
B) `(1, 2, [3, 4])`  
C) `Error`  
D) None  

**Answer:** A) `(1, 2, [99, 4])`  
*Explanation:* Tuples are immutable, but mutable objects (like lists) inside tuples can be modified.

---

#### **Q28. What does this code output?**
```python
print({True: "Yes", 1: "No", 1.0: "Maybe"})
```
A) `{'Yes': 'True', 'No': 1, 'Maybe': 1.0}`  
B) `{True: 'Maybe'}`  
C) `{True: 'No'}`  
D) Error  

**Answer:** C) `{True: 'No'}`  
*Explanation:* `True`, `1`, and `1.0` are treated as the same key in dictionaries.

---

#### **Q29. What is the output of this code?**
```python
x = [i for i in range(5) if i % 2 == 0]
print(x)
```
A) `[1, 3]`  
B) `[0, 2, 4]`  
C) `[2, 4]`  
D) Error  

**Answer:** B) `[0, 2, 4]`  
*Explanation:* The list comprehension selects even numbers from `range(5)`.

---

#### **Q30. What will this code print?**
```python
def func():
    yield 1
    yield 2

print(list(func()))
```
A) `[1]`  
B) `[2]`  
C) `[1, 2]`  
D) Error  

**Answer:** C) `[1, 2]`  
*Explanation:* `yield` makes `func` a generator, and `list(func())` collects all yielded values into a list.

---
